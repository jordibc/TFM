#!/usr/bin/env bash
#SBATCH --job-name eggnogmapper       # Name for your job
#SBATCH --partition=bigmem,long       # Partition to submit
#SBATCH --time=83:00:00               # total run time limit in HH:MM:SS
#SBATCH --mail-type=end               # send email when job ends
#SBATCH --mail-user=luciamartinfernandez99@gmail.com # this is the email you wish to be notified at
#SBATCH --mem=100GB                   # Reserve X GB RAM for the job
#SBATCH -c 5                          # number of cores
#SBATCH --nodes=1                     # request for cores to be in the same node 
#SBATCH --array=0-116                 # Array range and number of simultanous jobs
#SBATCH --output=logs/eggNOGmapper-%a_%A.out # STDOUT file
#SBATCH --error=logs/eggNOGmapper-%a_%A.err  # STDERR file

# Remember to create the logs directory in terminal
# mkdir logs

# Activate the conda environment in terminal
# source /data/jhc/soft/miniconda3/bin/activate
# conda activate eggnog-mapper
 
 
# Create variables of input and output data
RUN_PATH_I=/home/lmartin/SRV_RyC/05-assembly
RUN_PATH_O=/home/lmartin/SRV_RyC/06-eggnogmapper
names=($(cat /home/lmartin/SRV_RyC/00-raw_reads/samples_id.txt))


# 1. Run Gene Prediction with Prodigal and Functional Annotation with eggnog-mapper
# emapper.py -m diamond --itype metagenome --genepred prodigal -i $RUN_PATH_I/${names[${SLURM_ARRAY_TASK_ID}]}/contigs.fasta --output_dir $RUN_PATH_O/ --output ${names[${SLURM_ARRAY_TASK_ID}]} --dbmem --excel


# 2. Narrowest search to try reduce number of multiple ko
# emapper.py -m diamond --itype metagenome --genepred prodigal -i $RUN_PATH_I/${names[${SLURM_ARRAY_TASK_ID}]}/contigs.fasta --output_dir $RUN_PATH_O/narrowest/ --output ${names[${SLURM_ARRAY_TASK_ID}]} --dbmem --excel --tax_scope none --tax_scope_mode narrowest 
# emapper.py -m no_search --annotate_hits_table $RUN_PATH_O/narrowest/${names[${SLURM_ARRAY_TASK_ID}]}.emapper.seed_orthologs --output_dir $RUN_PATH_O/narrowest/ --output ${names[${SLURM_ARRAY_TASK_ID}]} --dbmem --excel --pident 40.0 --evalue 0.001 --score 60.0 --query_cover 20.0 --subject_cover 20.0 --tax_scope none --tax_scope_mode narrowest --resume


# 3. Rerun eggnogmapper with webserver default values
emapper.py -m no_search --annotate_hits_table $RUN_PATH_O/new_eggnogmapper/${names[${SLURM_ARRAY_TASK_ID}]}.emapper.seed_orthologs --output_dir $RUN_PATH_O/new_eggnogmapper/ --output ${names[${SLURM_ARRAY_TASK_ID}]} --dbmem --excel --pident 40.0 --evalue 0.001 --score 60.0 --query_cover 20.0 --subject_cover 20.0 --resume
# This is the one we finally use for RyC results analysis

# 4. Run eggnog-mapper with novel families, version 2.1.9. 

## On the terminal
# download_eggnog_data.py -F
# mkdir novel_families 

# emapper.py -m novel_fams --itype metagenome --genepred prodigal -i $RUN_PATH_I/${names[${SLURM_ARRAY_TASK_ID}]}/contigs.fasta --output_dir $RUN_PATH_O/novel_families/ --output ${names[${SLURM_ARRAY_TASK_ID}]} --excel
# emapper.py -m novel_fams --itype metagenome --genepred prodigal -i $RUN_PATH_I/${names[${SLURM_ARRAY_TASK_ID}]}/contigs.fasta --output_dir $RUN_PATH_O/new_novelfamilies/ --output ${names[${SLURM_ARRAY_TASK_ID}]} --dbmem --excel --pident 40.0 --evalue 0.001 --score 60.0 --query_cover 20.0 --subject_cover 20.0



